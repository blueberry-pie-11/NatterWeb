name: "Python Nuitka 可执行文件构建"

on:
  workflow_dispatch:  # 手动触发

jobs:
  构建:
    runs-on: ubuntu-22.04
    name: "构建主流程"

    steps:
      # 第一步：拉取代码
      - name: "检出代码"
        uses: actions/checkout@v4

      # 第二步：设置Python环境
      - name: "配置Python环境"
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 第三步：安装依赖
      - name: "安装构建依赖"
        run: |
          python -m pip install --upgrade pip
          pip install nuitka
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi

      # 第四步：构建ntsub
      - name: "构建ntsub可执行文件"
        run: |
          python -m nuitka \
              ntsub.py \
              --standalone \
              --onefile \
              --output-dir=dist \
              --follow-imports

      # 第五步：关键检查点
      - name: "验证ntsub构建结果"
        id: 验证构建
        run: |
          if [ -f "dist/ntsub.bin" ]; then
            echo "::notice::ntsub.bin 构建成功，继续后续流程"
            echo "continue=true" >> $GITHUB_OUTPUT
          else
            echo "::error::ntsub.bin 构建失败！工作流终止"
            exit 1
          fi

      # 第六步：构建app（条件执行）
      - name: "构建app可执行文件"
        if: steps.验证构建.outputs.continue == 'true'
        run: |
          python -m nuitka app.py \
            --standalone \
            --onefile \
            --enable-plugin=anti-bloat \
            --include-data-file=./plugin/notification/pg.py=plugin/notification/pg.py \
            --include-data-dir=./static/=static/ \
            --include-data-dir=./templates/=templates/ \
            --include-data-dir=./plugin/=plugin/ \
            --include-data-dir=./plugin/notification/templates/=plugin/notification/templates/ \
            --include-data-dir=./plugin/notification/static/=plugin/notification/static/ \
            --include-package=email \
            --follow-imports \
            --output-dir=dist

      # 第七步：验证输出结构
      - name: "检查输出目录结构"
        if: steps.验证构建.outputs.continue == 'true'
        run: |
          ls -l dist/app.dist/plugin/notification/

      # 第八步：打包成果物
      - name: "整理输出文件"
        if: steps.验证构建.outputs.continue == 'true'
        run: |
          cd dist
          mkdir -p 构建成果
          mv ntsub.bin ./构建成果/
          mv app.bin ./构建成果/

      # 第九步：上传成果物
      - name: "上传构建成果"
        if: steps.验证构建.outputs.continue == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: "可执行程序包"
          path: "dist/构建成果"
          retention-days: 7
